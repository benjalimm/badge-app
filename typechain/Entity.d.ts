/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EntityInterface extends ethers.utils.Interface {
  functions: {
    "assignPermissionToken(address,uint8,string)": FunctionFragment;
    "badgeRegistry()": FunctionFragment;
    "badgeToken()": FunctionFragment;
    "demeritPoints()": FunctionFragment;
    "getBadgeRegistry()": FunctionFragment;
    "getBadgeToken()": FunctionFragment;
    "getDemeritPoints()": FunctionFragment;
    "getPermissionToken()": FunctionFragment;
    "incrementDemeritPoints()": FunctionFragment;
    "mintBadge(address,uint256,string)": FunctionFragment;
    "permissionToken()": FunctionFragment;
    "permissionTokenHolders(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assignPermissionToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "demeritPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDemeritPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementDemeritPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadge",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionTokenHolders",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignPermissionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "badgeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "demeritPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDemeritPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementDemeritPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionTokenHolders",
    data: BytesLike
  ): Result;

  events: {
    "PermissionTokenAssigned(address,address,uint8,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PermissionTokenAssigned"): EventFragment;
}

export type PermissionTokenAssignedEvent = TypedEvent<
  [string, string, number, string, number] & {
    entityAddress: string;
    assigner: string;
    assignerLevel: number;
    assignee: string;
    assigneeLevel: number;
  }
>;

export class Entity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EntityInterface;

  functions: {
    assignPermissionToken(
      assignee: string,
      level: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    badgeRegistry(overrides?: CallOverrides): Promise<[string]>;

    badgeToken(overrides?: CallOverrides): Promise<[string]>;

    demeritPoints(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    getBadgeRegistry(overrides?: CallOverrides): Promise<[string]>;

    getBadgeToken(overrides?: CallOverrides): Promise<[string]>;

    getDemeritPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPermissionToken(overrides?: CallOverrides): Promise<[string]>;

    incrementDemeritPoints(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintBadge(
      to: string,
      level: BigNumberish,
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permissionToken(overrides?: CallOverrides): Promise<[string]>;

    permissionTokenHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  assignPermissionToken(
    assignee: string,
    level: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  badgeRegistry(overrides?: CallOverrides): Promise<string>;

  badgeToken(overrides?: CallOverrides): Promise<string>;

  demeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

  getBadgeRegistry(overrides?: CallOverrides): Promise<string>;

  getBadgeToken(overrides?: CallOverrides): Promise<string>;

  getDemeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

  getPermissionToken(overrides?: CallOverrides): Promise<string>;

  incrementDemeritPoints(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintBadge(
    to: string,
    level: BigNumberish,
    _tokenURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permissionToken(overrides?: CallOverrides): Promise<string>;

  permissionTokenHolders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    assignPermissionToken(
      assignee: string,
      level: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    badgeRegistry(overrides?: CallOverrides): Promise<string>;

    badgeToken(overrides?: CallOverrides): Promise<string>;

    demeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getBadgeRegistry(overrides?: CallOverrides): Promise<string>;

    getBadgeToken(overrides?: CallOverrides): Promise<string>;

    getDemeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionToken(overrides?: CallOverrides): Promise<string>;

    incrementDemeritPoints(overrides?: CallOverrides): Promise<void>;

    mintBadge(
      to: string,
      level: BigNumberish,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    permissionToken(overrides?: CallOverrides): Promise<string>;

    permissionTokenHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "PermissionTokenAssigned(address,address,uint8,address,uint8)"(
      entityAddress?: null,
      assigner?: null,
      assignerLevel?: null,
      assignee?: null,
      assigneeLevel?: null
    ): TypedEventFilter<
      [string, string, number, string, number],
      {
        entityAddress: string;
        assigner: string;
        assignerLevel: number;
        assignee: string;
        assigneeLevel: number;
      }
    >;

    PermissionTokenAssigned(
      entityAddress?: null,
      assigner?: null,
      assignerLevel?: null,
      assignee?: null,
      assigneeLevel?: null
    ): TypedEventFilter<
      [string, string, number, string, number],
      {
        entityAddress: string;
        assigner: string;
        assignerLevel: number;
        assignee: string;
        assigneeLevel: number;
      }
    >;
  };

  estimateGas: {
    assignPermissionToken(
      assignee: string,
      level: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    badgeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    badgeToken(overrides?: CallOverrides): Promise<BigNumber>;

    demeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getBadgeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getBadgeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getDemeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionToken(overrides?: CallOverrides): Promise<BigNumber>;

    incrementDemeritPoints(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintBadge(
      to: string,
      level: BigNumberish,
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permissionToken(overrides?: CallOverrides): Promise<BigNumber>;

    permissionTokenHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignPermissionToken(
      assignee: string,
      level: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    badgeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    demeritPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBadgeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBadgeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDemeritPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissionToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementDemeritPoints(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintBadge(
      to: string,
      level: BigNumberish,
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permissionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissionTokenHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
