/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BadgeRegistryInterface extends ethers.utils.Interface {
  functions: {
    "badgeGnosisSafe()": FunctionFragment;
    "badgePriceCalculator()": FunctionFragment;
    "badgeTokenEntityReverseRecord(address)": FunctionFragment;
    "badgeTokenFactory()": FunctionFragment;
    "badgeXPToken()": FunctionFragment;
    "entities(address)": FunctionFragment;
    "entityFactory()": FunctionFragment;
    "filterAddressesForEntityReverseRecord(uint8,address[])": FunctionFragment;
    "getBadgePrice(uint256)": FunctionFragment;
    "getBadgeTokenFactory()": FunctionFragment;
    "getBadgeXPToken()": FunctionFragment;
    "getEntityFactory()": FunctionFragment;
    "getLevelMultiplierX1000()": FunctionFragment;
    "getPermissionTokenFactory()": FunctionFragment;
    "getRecoveryOracle()": FunctionFragment;
    "getSafe()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "levelMultiplierX1000()": FunctionFragment;
    "owner()": FunctionFragment;
    "permTokenEntityReverseRecord(address)": FunctionFragment;
    "permissionContract()": FunctionFragment;
    "permissionTokenFactory()": FunctionFragment;
    "recoveryOracle()": FunctionFragment;
    "registerEntity(string,string)": FunctionFragment;
    "setBadgePriceCalculator(address)": FunctionFragment;
    "setBadgeTokenFactory(address)": FunctionFragment;
    "setBadgeXPToken(address)": FunctionFragment;
    "setEntityFactory(address)": FunctionFragment;
    "setPermissionTokenFactory(address)": FunctionFragment;
    "setRecoveryOracle(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "badgeGnosisSafe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgePriceCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeTokenEntityReverseRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "badgeTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeXPToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "entities", values: [string]): string;
  encodeFunctionData(
    functionFragment: "entityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filterAddressesForEntityReverseRecord",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeXPToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelMultiplierX1000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSafe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "levelMultiplierX1000",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permTokenEntityReverseRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerEntity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgePriceCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeXPToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntityFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryOracle",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "badgeGnosisSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgePriceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeTokenEntityReverseRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeXPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filterAddressesForEntityReverseRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeXPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelMultiplierX1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelMultiplierX1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permTokenEntityReverseRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgePriceCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeXPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryOracle",
    data: BytesLike
  ): Result;

  events: {
    "BadgePriceCalculatorSet(address)": EventFragment;
    "BadgeTokenFactorySet(address)": EventFragment;
    "BadgeXPTokenSet(address)": EventFragment;
    "EntityFactorySet(address)": EventFragment;
    "EntityRegistered(address,string,address)": EventFragment;
    "PermissionTokenFactorySet(address)": EventFragment;
    "RecoveryOracleSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BadgePriceCalculatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BadgeTokenFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BadgeXPTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntityFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntityRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionTokenFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryOracleSet"): EventFragment;
}

export type BadgePriceCalculatorSetEvent = TypedEvent<
  [string] & { badgePriceCalculator: string }
>;

export type BadgeTokenFactorySetEvent = TypedEvent<
  [string] & { badgeTokenFactory: string }
>;

export type BadgeXPTokenSetEvent = TypedEvent<
  [string] & { badgeXPToken: string }
>;

export type EntityFactorySetEvent = TypedEvent<
  [string] & { entityFactory: string }
>;

export type EntityRegisteredEvent = TypedEvent<
  [string, string, string] & {
    entityAddress: string;
    entityName: string;
    genesisTokenHolder: string;
  }
>;

export type PermissionTokenFactorySetEvent = TypedEvent<
  [string] & { permissionTokenFactory: string }
>;

export type RecoveryOracleSetEvent = TypedEvent<
  [string] & { recoveryOracle: string }
>;

export class BadgeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BadgeRegistryInterface;

  functions: {
    badgeGnosisSafe(overrides?: CallOverrides): Promise<[string]>;

    badgePriceCalculator(overrides?: CallOverrides): Promise<[string]>;

    badgeTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    badgeXPToken(overrides?: CallOverrides): Promise<[string]>;

    entities(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    entityFactory(overrides?: CallOverrides): Promise<[string]>;

    filterAddressesForEntityReverseRecord(
      tokenType: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBadgeTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<[string]>;

    getEntityFactory(overrides?: CallOverrides): Promise<[string]>;

    getLevelMultiplierX1000(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPermissionTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<[string]>;

    getSafe(overrides?: CallOverrides): Promise<[string]>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    levelMultiplierX1000(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permissionContract(overrides?: CallOverrides): Promise<[string]>;

    permissionTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    recoveryOracle(overrides?: CallOverrides): Promise<[string]>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBadgePriceCalculator(
      _badgePriceCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  badgeGnosisSafe(overrides?: CallOverrides): Promise<string>;

  badgePriceCalculator(overrides?: CallOverrides): Promise<string>;

  badgeTokenEntityReverseRecord(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  badgeTokenFactory(overrides?: CallOverrides): Promise<string>;

  badgeXPToken(overrides?: CallOverrides): Promise<string>;

  entities(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  entityFactory(overrides?: CallOverrides): Promise<string>;

  filterAddressesForEntityReverseRecord(
    tokenType: BigNumberish,
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBadgePrice(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBadgeTokenFactory(overrides?: CallOverrides): Promise<string>;

  getBadgeXPToken(overrides?: CallOverrides): Promise<string>;

  getEntityFactory(overrides?: CallOverrides): Promise<string>;

  getLevelMultiplierX1000(overrides?: CallOverrides): Promise<BigNumber>;

  getPermissionTokenFactory(overrides?: CallOverrides): Promise<string>;

  getRecoveryOracle(overrides?: CallOverrides): Promise<string>;

  getSafe(overrides?: CallOverrides): Promise<string>;

  isRegistered(addr: string, overrides?: CallOverrides): Promise<boolean>;

  levelMultiplierX1000(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permTokenEntityReverseRecord(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  permissionContract(overrides?: CallOverrides): Promise<string>;

  permissionTokenFactory(overrides?: CallOverrides): Promise<string>;

  recoveryOracle(overrides?: CallOverrides): Promise<string>;

  registerEntity(
    entityName: string,
    genesisTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBadgePriceCalculator(
    _badgePriceCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBadgeTokenFactory(
    _badgeTokenFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBadgeXPToken(
    _badgeXPToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEntityFactory(
    _entityFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissionTokenFactory(
    _permissionTokenFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoveryOracle(
    _recoveryOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    badgeGnosisSafe(overrides?: CallOverrides): Promise<string>;

    badgePriceCalculator(overrides?: CallOverrides): Promise<string>;

    badgeTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<string>;

    badgeXPToken(overrides?: CallOverrides): Promise<string>;

    entities(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    entityFactory(overrides?: CallOverrides): Promise<string>;

    filterAddressesForEntityReverseRecord(
      tokenType: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadgeTokenFactory(overrides?: CallOverrides): Promise<string>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<string>;

    getEntityFactory(overrides?: CallOverrides): Promise<string>;

    getLevelMultiplierX1000(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionTokenFactory(overrides?: CallOverrides): Promise<string>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<string>;

    getSafe(overrides?: CallOverrides): Promise<string>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<boolean>;

    levelMultiplierX1000(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    permissionContract(overrides?: CallOverrides): Promise<string>;

    permissionTokenFactory(overrides?: CallOverrides): Promise<string>;

    recoveryOracle(overrides?: CallOverrides): Promise<string>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgePriceCalculator(
      _badgePriceCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BadgePriceCalculatorSet(address)"(
      badgePriceCalculator?: null
    ): TypedEventFilter<[string], { badgePriceCalculator: string }>;

    BadgePriceCalculatorSet(
      badgePriceCalculator?: null
    ): TypedEventFilter<[string], { badgePriceCalculator: string }>;

    "BadgeTokenFactorySet(address)"(
      badgeTokenFactory?: null
    ): TypedEventFilter<[string], { badgeTokenFactory: string }>;

    BadgeTokenFactorySet(
      badgeTokenFactory?: null
    ): TypedEventFilter<[string], { badgeTokenFactory: string }>;

    "BadgeXPTokenSet(address)"(
      badgeXPToken?: null
    ): TypedEventFilter<[string], { badgeXPToken: string }>;

    BadgeXPTokenSet(
      badgeXPToken?: null
    ): TypedEventFilter<[string], { badgeXPToken: string }>;

    "EntityFactorySet(address)"(
      entityFactory?: null
    ): TypedEventFilter<[string], { entityFactory: string }>;

    EntityFactorySet(
      entityFactory?: null
    ): TypedEventFilter<[string], { entityFactory: string }>;

    "EntityRegistered(address,string,address)"(
      entityAddress?: null,
      entityName?: null,
      genesisTokenHolder?: null
    ): TypedEventFilter<
      [string, string, string],
      { entityAddress: string; entityName: string; genesisTokenHolder: string }
    >;

    EntityRegistered(
      entityAddress?: null,
      entityName?: null,
      genesisTokenHolder?: null
    ): TypedEventFilter<
      [string, string, string],
      { entityAddress: string; entityName: string; genesisTokenHolder: string }
    >;

    "PermissionTokenFactorySet(address)"(
      permissionTokenFactory?: null
    ): TypedEventFilter<[string], { permissionTokenFactory: string }>;

    PermissionTokenFactorySet(
      permissionTokenFactory?: null
    ): TypedEventFilter<[string], { permissionTokenFactory: string }>;

    "RecoveryOracleSet(address)"(
      recoveryOracle?: null
    ): TypedEventFilter<[string], { recoveryOracle: string }>;

    RecoveryOracleSet(
      recoveryOracle?: null
    ): TypedEventFilter<[string], { recoveryOracle: string }>;
  };

  estimateGas: {
    badgeGnosisSafe(overrides?: CallOverrides): Promise<BigNumber>;

    badgePriceCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    badgeTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    badgeXPToken(overrides?: CallOverrides): Promise<BigNumber>;

    entities(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    entityFactory(overrides?: CallOverrides): Promise<BigNumber>;

    filterAddressesForEntityReverseRecord(
      tokenType: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadgeTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<BigNumber>;

    getEntityFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getLevelMultiplierX1000(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getSafe(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    levelMultiplierX1000(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissionContract(overrides?: CallOverrides): Promise<BigNumber>;

    permissionTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryOracle(overrides?: CallOverrides): Promise<BigNumber>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBadgePriceCalculator(
      _badgePriceCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    badgeGnosisSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgePriceCalculator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    badgeTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeXPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entityFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filterAddressesForEntityReverseRecord(
      tokenType: BigNumberish,
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBadgeTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntityFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLevelMultiplierX1000(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelMultiplierX1000(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permTokenEntityReverseRecord(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBadgePriceCalculator(
      _badgePriceCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
