/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BadgeRegistryInterface extends ethers.utils.Interface {
  functions: {
    "acceptDeployerRequest()": FunctionFragment;
    "badgePriceOracle()": FunctionFragment;
    "badgeTokenFactory()": FunctionFragment;
    "badgeTreasury()": FunctionFragment;
    "badgeXPToken()": FunctionFragment;
    "baseMinimumStake()": FunctionFragment;
    "certifiedRegistries(address)": FunctionFragment;
    "deployer()": FunctionFragment;
    "entities(address)": FunctionFragment;
    "entityFactory()": FunctionFragment;
    "getBadgePrice(uint8)": FunctionFragment;
    "getBadgeTokenFactory()": FunctionFragment;
    "getBadgeXPToken()": FunctionFragment;
    "getBaseMinimumStake()": FunctionFragment;
    "getDeployer()": FunctionFragment;
    "getEntityFactory()": FunctionFragment;
    "getPermissionTokenFactory()": FunctionFragment;
    "getRecoveryOracle()": FunctionFragment;
    "getSafe()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "isRegistryCertified(address)": FunctionFragment;
    "permissionTokenFactory()": FunctionFragment;
    "recoveryOracle()": FunctionFragment;
    "registerEntity(string,string,bool)": FunctionFragment;
    "requestNewDeployer(address)": FunctionFragment;
    "requestedDeployer()": FunctionFragment;
    "setBadgePriceOracle(address)": FunctionFragment;
    "setBadgeTokenFactory(address)": FunctionFragment;
    "setBadgeTreasury(address)": FunctionFragment;
    "setBadgeXPToken(address)": FunctionFragment;
    "setBaseMinimumStake(uint256)": FunctionFragment;
    "setCertifiedRegistry(address,bool)": FunctionFragment;
    "setEntityFactory(address)": FunctionFragment;
    "setPermissionTokenFactory(address)": FunctionFragment;
    "setRecoveryOracle(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptDeployerRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgePriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeXPToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseMinimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "certifiedRegistries",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "entities", values: [string]): string;
  encodeFunctionData(
    functionFragment: "entityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBadgeXPToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseMinimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSafe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistryCertified",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerEntity",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNewDeployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgePriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBadgeXPToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseMinimumStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCertifiedRegistry",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntityFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionTokenFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryOracle",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptDeployerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "badgeXPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "certifiedRegistries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBadgeXPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistryCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNewDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgePriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBadgeXPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCertifiedRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntityFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "EntityRegistered(address,string,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntityRegistered"): EventFragment;
}

export type EntityRegisteredEvent = TypedEvent<
  [string, string, string, string, string] & {
    entityAddress: string;
    entityName: string;
    genesisTokenHolder: string;
    permissionToken: string;
    badgeToken: string;
  }
>;

export class BadgeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BadgeRegistryInterface;

  functions: {
    acceptDeployerRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    badgePriceOracle(overrides?: CallOverrides): Promise<[string]>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    badgeTreasury(overrides?: CallOverrides): Promise<[string]>;

    badgeXPToken(overrides?: CallOverrides): Promise<[string]>;

    baseMinimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    certifiedRegistries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    entities(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    entityFactory(overrides?: CallOverrides): Promise<[string]>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBadgeTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<[string]>;

    getBaseMinimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDeployer(overrides?: CallOverrides): Promise<[string]>;

    getEntityFactory(overrides?: CallOverrides): Promise<[string]>;

    getPermissionTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<[string]>;

    getSafe(overrides?: CallOverrides): Promise<[string]>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isRegistryCertified(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    permissionTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    recoveryOracle(overrides?: CallOverrides): Promise<[string]>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      deployTokens: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestNewDeployer(
      _requestedDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestedDeployer(overrides?: CallOverrides): Promise<[string]>;

    setBadgePriceOracle(
      _badgePriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBadgeTreasury(
      _badgeTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseMinimumStake(
      _baseMinimumStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCertifiedRegistry(
      _certifiedRegistry: string,
      _certified: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptDeployerRequest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  badgePriceOracle(overrides?: CallOverrides): Promise<string>;

  badgeTokenFactory(overrides?: CallOverrides): Promise<string>;

  badgeTreasury(overrides?: CallOverrides): Promise<string>;

  badgeXPToken(overrides?: CallOverrides): Promise<string>;

  baseMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  certifiedRegistries(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deployer(overrides?: CallOverrides): Promise<string>;

  entities(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  entityFactory(overrides?: CallOverrides): Promise<string>;

  getBadgePrice(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBadgeTokenFactory(overrides?: CallOverrides): Promise<string>;

  getBadgeXPToken(overrides?: CallOverrides): Promise<string>;

  getBaseMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  getDeployer(overrides?: CallOverrides): Promise<string>;

  getEntityFactory(overrides?: CallOverrides): Promise<string>;

  getPermissionTokenFactory(overrides?: CallOverrides): Promise<string>;

  getRecoveryOracle(overrides?: CallOverrides): Promise<string>;

  getSafe(overrides?: CallOverrides): Promise<string>;

  isRegistered(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isRegistryCertified(
    _registry: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  permissionTokenFactory(overrides?: CallOverrides): Promise<string>;

  recoveryOracle(overrides?: CallOverrides): Promise<string>;

  registerEntity(
    entityName: string,
    genesisTokenURI: string,
    deployTokens: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestNewDeployer(
    _requestedDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestedDeployer(overrides?: CallOverrides): Promise<string>;

  setBadgePriceOracle(
    _badgePriceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBadgeTokenFactory(
    _badgeTokenFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBadgeTreasury(
    _badgeTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBadgeXPToken(
    _badgeXPToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseMinimumStake(
    _baseMinimumStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCertifiedRegistry(
    _certifiedRegistry: string,
    _certified: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEntityFactory(
    _entityFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissionTokenFactory(
    _permissionTokenFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecoveryOracle(
    _recoveryOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptDeployerRequest(overrides?: CallOverrides): Promise<void>;

    badgePriceOracle(overrides?: CallOverrides): Promise<string>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<string>;

    badgeTreasury(overrides?: CallOverrides): Promise<string>;

    badgeXPToken(overrides?: CallOverrides): Promise<string>;

    baseMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    certifiedRegistries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployer(overrides?: CallOverrides): Promise<string>;

    entities(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    entityFactory(overrides?: CallOverrides): Promise<string>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadgeTokenFactory(overrides?: CallOverrides): Promise<string>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<string>;

    getBaseMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployer(overrides?: CallOverrides): Promise<string>;

    getEntityFactory(overrides?: CallOverrides): Promise<string>;

    getPermissionTokenFactory(overrides?: CallOverrides): Promise<string>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<string>;

    getSafe(overrides?: CallOverrides): Promise<string>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isRegistryCertified(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permissionTokenFactory(overrides?: CallOverrides): Promise<string>;

    recoveryOracle(overrides?: CallOverrides): Promise<string>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      deployTokens: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    requestNewDeployer(
      _requestedDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestedDeployer(overrides?: CallOverrides): Promise<string>;

    setBadgePriceOracle(
      _badgePriceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgeTreasury(
      _badgeTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseMinimumStake(
      _baseMinimumStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCertifiedRegistry(
      _certifiedRegistry: string,
      _certified: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EntityRegistered(address,string,address,address,address)"(
      entityAddress?: null,
      entityName?: null,
      genesisTokenHolder?: null,
      permissionToken?: null,
      badgeToken?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        entityAddress: string;
        entityName: string;
        genesisTokenHolder: string;
        permissionToken: string;
        badgeToken: string;
      }
    >;

    EntityRegistered(
      entityAddress?: null,
      entityName?: null,
      genesisTokenHolder?: null,
      permissionToken?: null,
      badgeToken?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      {
        entityAddress: string;
        entityName: string;
        genesisTokenHolder: string;
        permissionToken: string;
        badgeToken: string;
      }
    >;
  };

  estimateGas: {
    acceptDeployerRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    badgePriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    badgeTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    badgeXPToken(overrides?: CallOverrides): Promise<BigNumber>;

    baseMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    certifiedRegistries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    entities(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    entityFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBadgeTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    getEntityFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getPermissionTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getSafe(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isRegistryCertified(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissionTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryOracle(overrides?: CallOverrides): Promise<BigNumber>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      deployTokens: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestNewDeployer(
      _requestedDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestedDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    setBadgePriceOracle(
      _badgePriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBadgeTreasury(
      _badgeTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseMinimumStake(
      _baseMinimumStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCertifiedRegistry(
      _certifiedRegistry: string,
      _certified: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDeployerRequest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    badgePriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeXPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseMinimumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    certifiedRegistries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entities(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entityFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBadgePrice(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBadgeTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBadgeXPToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseMinimumStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntityFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPermissionTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistryCertified(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionTokenFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerEntity(
      entityName: string,
      genesisTokenURI: string,
      deployTokens: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestNewDeployer(
      _requestedDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestedDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBadgePriceOracle(
      _badgePriceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBadgeTokenFactory(
      _badgeTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBadgeTreasury(
      _badgeTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBadgeXPToken(
      _badgeXPToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseMinimumStake(
      _baseMinimumStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCertifiedRegistry(
      _certifiedRegistry: string,
      _certified: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEntityFactory(
      _entityFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionTokenFactory(
      _permissionTokenFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryOracle(
      _recoveryOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
