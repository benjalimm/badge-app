/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBadgeTokenInterface extends ethers.utils.Interface {
  functions: {
    "burnAsEntity(uint256)": FunctionFragment;
    "getDemeritPoints()": FunctionFragment;
    "getEntity()": FunctionFragment;
    "getTimestampForBadge(uint256)": FunctionFragment;
    "getXPForBadge(uint256)": FunctionFragment;
    "mintBadge(address,uint256,uint256,string)": FunctionFragment;
    "setNewEntity(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnAsEntity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDemeritPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEntity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTimestampForBadge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getXPForBadge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBadge",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewEntity",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnAsEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDemeritPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampForBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXPForBadge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewEntity",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBadgeToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBadgeTokenInterface;

  functions: {
    burnAsEntity(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDemeritPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntity(overrides?: CallOverrides): Promise<[string]>;

    getTimestampForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getXPForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintBadge(
      to: string,
      level: BigNumberish,
      xp: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewEntity(
      _entity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnAsEntity(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDemeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

  getEntity(overrides?: CallOverrides): Promise<string>;

  getTimestampForBadge(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getXPForBadge(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintBadge(
    to: string,
    level: BigNumberish,
    xp: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewEntity(
    _entity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnAsEntity(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDemeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getEntity(overrides?: CallOverrides): Promise<string>;

    getTimestampForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getXPForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBadge(
      to: string,
      level: BigNumberish,
      xp: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewEntity(_entity: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    burnAsEntity(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDemeritPoints(overrides?: CallOverrides): Promise<BigNumber>;

    getEntity(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestampForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getXPForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBadge(
      to: string,
      level: BigNumberish,
      xp: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewEntity(
      _entity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnAsEntity(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDemeritPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestampForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getXPForBadge(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBadge(
      to: string,
      level: BigNumberish,
      xp: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewEntity(
      _entity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
