/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadgeRegistry, BadgeRegistryInterface } from "../BadgeRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "entityAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "entityName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "genesisTokenHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "permissionToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "badgeToken",
        type: "address",
      },
    ],
    name: "EntityRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptDeployerRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "badgePriceOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "badgeTokenFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "badgeTreasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "badgeXPToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseMinimumStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "certifiedRegistries",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "entities",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "entityFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "getBadgePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBadgeTokenFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBadgeXPToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseMinimumStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntityFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPermissionTokenFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecoveryOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSafe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "isRegistryCertified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "permissionTokenFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "recoveryOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "entityName",
        type: "string",
      },
      {
        internalType: "string",
        name: "genesisTokenURI",
        type: "string",
      },
      {
        internalType: "bool",
        name: "deployTokens",
        type: "bool",
      },
    ],
    name: "registerEntity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_requestedDeployer",
        type: "address",
      },
    ],
    name: "requestNewDeployer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestedDeployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgePriceOracle",
        type: "address",
      },
    ],
    name: "setBadgePriceOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeTokenFactory",
        type: "address",
      },
    ],
    name: "setBadgeTokenFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeTreasury",
        type: "address",
      },
    ],
    name: "setBadgeTreasury",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeXPToken",
        type: "address",
      },
    ],
    name: "setBadgeXPToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_baseMinimumStake",
        type: "uint256",
      },
    ],
    name: "setBaseMinimumStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_certifiedRegistry",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_certified",
        type: "bool",
      },
    ],
    name: "setCertifiedRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_entityFactory",
        type: "address",
      },
    ],
    name: "setEntityFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_permissionTokenFactory",
        type: "address",
      },
    ],
    name: "setPermissionTokenFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recoveryOracle",
        type: "address",
      },
    ],
    name: "setRecoveryOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405266354a6ba7a18000600b5534801561001b57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612130806100c36000396000f3fe60806040526004361061020f5760003560e01c80637d09037811610118578063c3c5a547116100a0578063d5f394881161006f578063d5f3948814610770578063d6b66c581461079b578063d7cd8c9b146107c4578063eab15067146107ed578063ec700190146108185761020f565b8063c3c5a547146106c8578063cdd8ee7f14610705578063d11d8e6614610730578063d2502a98146107475761020f565b8063a59cf7e1116100e7578063a59cf7e1146105e3578063a78564621461060e578063b4bf50751461064b578063bb0a69b014610676578063bfbaade71461069f5761020f565b80637d0903781461054a5780638ca5cd2e146105665780639d1c1b821461058f578063a4714b9a146105ba5761020f565b806339c2c47f1161019b57806354356f371161016a57806354356f371461047557806354fd4d50146104a057806368bc573e146104cb57806372630531146104f6578063745851e2146105215761020f565b806339c2c47f146103b75780633c62eea3146103e25780634849a7ed1461040d57806350ed05221461044a5761020f565b80631e93e397116101e25780631e93e397146102e457806327a462fe1461030f5780632e7fdc941461033a5780632e8603151461036357806330f3130e1461038c5761020f565b806309c33619146102145780630d5214811461023f57806313c91bd71461026a5780631d8ee48a146102a7575b600080fd5b34801561022057600080fd5b50610229610843565b6040516102369190611d0a565b60405180910390f35b34801561024b57600080fd5b50610254610869565b6040516102619190611d0a565b60405180910390f35b34801561027657600080fd5b50610291600480360381019061028c9190611b7b565b61088f565b60405161029e9190611ea3565b60405180910390f35b3480156102b357600080fd5b506102ce60048036038101906102c991906119e9565b610943565b6040516102db9190611d81565b60405180910390f35b3480156102f057600080fd5b506102f9610963565b6040516103069190611d0a565b60405180910390f35b34801561031b57600080fd5b5061032461098d565b6040516103319190611d0a565b60405180910390f35b34801561034657600080fd5b50610361600480360381019061035c91906119e9565b6109b7565b005b34801561036f57600080fd5b5061038a600480360381019061038591906119e9565b610a89565b005b34801561039857600080fd5b506103a1610b5b565b6040516103ae9190611ea3565b60405180910390f35b3480156103c357600080fd5b506103cc610b65565b6040516103d99190611ea3565b60405180910390f35b3480156103ee57600080fd5b506103f7610b6b565b6040516104049190611d0a565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f91906119e9565b610b91565b6040516104419190611d81565b60405180910390f35b34801561045657600080fd5b5061045f610bb1565b60405161046c9190611d0a565b60405180910390f35b34801561048157600080fd5b5061048a610bd7565b6040516104979190611d0a565b60405180910390f35b3480156104ac57600080fd5b506104b5610bfd565b6040516104c29190611e01565b60405180910390f35b3480156104d757600080fd5b506104e0610c36565b6040516104ed9190611d0a565b60405180910390f35b34801561050257600080fd5b5061050b610c60565b6040516105189190611d0a565b60405180910390f35b34801561052d57600080fd5b50610548600480360381019061054391906119e9565b610c89565b005b610564600480360381019061055f9190611aa0565b610d5b565b005b34801561057257600080fd5b5061058d600480360381019061058891906119e9565b6110df565b005b34801561059b57600080fd5b506105a46111b1565b6040516105b19190611d0a565b60405180910390f35b3480156105c657600080fd5b506105e160048036038101906105dc91906119e9565b6111d7565b005b3480156105ef57600080fd5b506105f86112a9565b6040516106059190611d0a565b60405180910390f35b34801561061a57600080fd5b50610635600480360381019061063091906119e9565b6112d3565b6040516106429190611d81565b60405180910390f35b34801561065757600080fd5b50610660611329565b60405161066d9190611d0a565b60405180910390f35b34801561068257600080fd5b5061069d60048036038101906106989190611a3b565b611353565b005b3480156106ab57600080fd5b506106c660048036038101906106c19190611b29565b61143c565b005b3480156106d457600080fd5b506106ef60048036038101906106ea91906119e9565b6114d4565b6040516106fc9190611d81565b60405180910390f35b34801561071157600080fd5b5061071a61152a565b6040516107279190611d0a565b60405180910390f35b34801561073c57600080fd5b50610745611550565b005b34801561075357600080fd5b5061076e600480360381019061076991906119e9565b611622565b005b34801561077c57600080fd5b506107856116f4565b6040516107929190611d0a565b60405180910390f35b3480156107a757600080fd5b506107c260048036038101906107bd91906119e9565b611718565b005b3480156107d057600080fd5b506107eb60048036038101906107e691906119e9565b6117ea565b005b3480156107f957600080fd5b506108026118bc565b60405161080f9190611d0a565b60405180910390f35b34801561082457600080fd5b5061082d6118e6565b60405161083a9190611d0a565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d9f05a4d836040518263ffffffff1660e01b81526004016108ec9190611ebe565b60206040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093c9190611b52565b9050919050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a45576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610a3c90611e63565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b17576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610b0e90611e63565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600b54905090565b600b5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915054906101000a900460ff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d17576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610d0e90611e63565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a6aff8b8787600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338989896040518863ffffffff1660e01b8152600401610de69796959493929190611d9c565b602060405180830381600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e389190611a77565b905060008190506001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080841561109357600b54341015610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90611e23565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16635be0eefb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2b57600080fd5b505afa158015610f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f639190611a12565b91508373ffffffffffffffffffffffffffffffffffffffff1663dd75b3f66040518163ffffffff1660e01b815260040160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611a12565b905060008273ffffffffffffffffffffffffffffffffffffffff163460405161100b90611cf5565b60006040518083038185875af1925050503d8060008114611048576040519150601f19603f3d011682016040523d82523d6000602084013e61104d565b606091505b5050905080611091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108890611e43565b60405180910390fd5b505b7fa07c9c0b87be8f24d06157f823dde07d0c0ef0fc0d0debcf32beef051209e45d838a8a3385876040516110cc96959493929190611d25565b60405180910390a1505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116d576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161116490611e63565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611265576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161125c90611e63565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113e1576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016113d890611e63565b60405180910390fd5b80600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114ca576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016114c190611e63565b60405180910390fd5b80600b8190555050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d790611e83565b60405180910390fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116b0576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016116a790611e63565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117a6576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161179d90611e63565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611878576040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161186f90611e63565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008135905061191b81612087565b92915050565b60008151905061193081612087565b92915050565b6000813590506119458161209e565b92915050565b60008151905061195a816120b5565b92915050565b60008083601f84011261197257600080fd5b8235905067ffffffffffffffff81111561198b57600080fd5b6020830191508360018202830111156119a357600080fd5b9250929050565b6000813590506119b9816120cc565b92915050565b6000815190506119ce816120cc565b92915050565b6000813590506119e3816120e3565b92915050565b6000602082840312156119fb57600080fd5b6000611a098482850161190c565b91505092915050565b600060208284031215611a2457600080fd5b6000611a3284828501611921565b91505092915050565b60008060408385031215611a4e57600080fd5b6000611a5c8582860161190c565b9250506020611a6d85828601611936565b9150509250929050565b600060208284031215611a8957600080fd5b6000611a978482850161194b565b91505092915050565b600080600080600060608688031215611ab857600080fd5b600086013567ffffffffffffffff811115611ad257600080fd5b611ade88828901611960565b9550955050602086013567ffffffffffffffff811115611afd57600080fd5b611b0988828901611960565b93509350506040611b1c88828901611936565b9150509295509295909350565b600060208284031215611b3b57600080fd5b6000611b49848285016119aa565b91505092915050565b600060208284031215611b6457600080fd5b6000611b72848285016119bf565b91505092915050565b600060208284031215611b8d57600080fd5b6000611b9b848285016119d4565b91505092915050565b611bad81611f00565b82525050565b611bbc81611f12565b82525050565b6000611bce8385611eef565b9350611bdb838584611f67565b611be483611fa9565b840190509392505050565b6000611bfa82611ed9565b611c048185611eef565b9350611c14818560208601611f76565b611c1d81611fa9565b840191505092915050565b6000611c35601083611eef565b9150611c4082611fba565b602082019050919050565b6000611c58602183611eef565b9150611c6382611fe3565b604082019050919050565b6000611c7b601b83611eef565b9150611c8682612032565b602082019050919050565b6000611c9e601683611eef565b9150611ca98261205b565b602082019050919050565b6000611cc1600083611ee4565b9150611ccc82612084565b600082019050919050565b611ce081611f50565b82525050565b611cef81611f5a565b82525050565b6000611d0082611cb4565b9150819050919050565b6000602082019050611d1f6000830184611ba4565b92915050565b600060a082019050611d3a6000830189611ba4565b8181036020830152611d4d818789611bc2565b9050611d5c6040830186611ba4565b611d696060830185611ba4565b611d766080830184611ba4565b979650505050505050565b6000602082019050611d966000830184611bb3565b92915050565b600060a0820190508181036000830152611db781898b611bc2565b9050611dc66020830188611ba4565b611dd36040830187611ba4565b8181036060830152611de6818587611bc2565b9050611df56080830184611bb3565b98975050505050505050565b60006020820190508181036000830152611e1b8184611bef565b905092915050565b60006020820190508181036000830152611e3c81611c28565b9050919050565b60006020820190508181036000830152611e5c81611c4b565b9050919050565b60006020820190508181036000830152611e7c81611c6e565b9050919050565b60006020820190508181036000830152611e9c81611c91565b9050919050565b6000602082019050611eb86000830184611cd7565b92915050565b6000602082019050611ed36000830184611ce6565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611f0b82611f30565b9050919050565b60008115159050919050565b6000611f2982611f00565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611f94578082015181840152602081019050611f79565b83811115611fa3576000848401525b50505050565b6000601f19601f8301169050919050565b7f4e6f7420656e6f756768207374616b6500000000000000000000000000000000600082015250565b7f4661696c656420746f2073656e642065746820746f20626164676520746f6b6560008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206465706c6f7965722063616e2063616c6c20746869730000000000600082015250565b7f4e6f7420726571756573746564206465706c6f79657200000000000000000000600082015250565b50565b61209081611f00565b811461209b57600080fd5b50565b6120a781611f12565b81146120b257600080fd5b50565b6120be81611f1e565b81146120c957600080fd5b50565b6120d581611f50565b81146120e057600080fd5b50565b6120ec81611f5a565b81146120f757600080fd5b5056fea264697066735822122052e783386b7e1da5c6679f3211a44fab9fa48a95daf6ddb69436558d531cc3b964736f6c63430008040033";

export class BadgeRegistry__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadgeRegistry> {
    return super.deploy(overrides || {}) as Promise<BadgeRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadgeRegistry {
    return super.attach(address) as BadgeRegistry;
  }
  connect(signer: Signer): BadgeRegistry__factory {
    return super.connect(signer) as BadgeRegistry__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeRegistryInterface {
    return new utils.Interface(_abi) as BadgeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeRegistry {
    return new Contract(address, _abi, signerOrProvider) as BadgeRegistry;
  }
}
