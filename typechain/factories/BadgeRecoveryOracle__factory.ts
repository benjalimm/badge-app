/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BadgeRecoveryOracle,
  BadgeRecoveryOracleInterface,
} from "../BadgeRecoveryOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "recoveryAddress",
        type: "address",
      },
    ],
    name: "RecoveryAddressAlreadySet",
    type: "error",
  },
  {
    inputs: [],
    name: "RecoveryAddressSameAsSender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "initialAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recoveryAddress",
        type: "address",
      },
    ],
    name: "RecoveryAddressSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getRecoveryAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "recoveryAddressMap",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recoveryAddress",
        type: "address",
      },
    ],
    name: "setRecoveryAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061057e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806336d9e9031461005157806349efe5ae14610081578063511865e91461009d57806354fd4d50146100cd575b600080fd5b61006b600480360381019061006691906103c8565b6100eb565b6040516100789190610439565b60405180910390f35b61009b600480360381019061009691906103c8565b61011e565b005b6100b760048036038101906100b291906103c8565b610312565b6040516100c49190610439565b60405180910390f35b6100d561037a565b6040516100e2919061047d565b60405180910390f35b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146101f257806040517fb0d009840000000000000000000000000000000000000000000000000000000081526004016101e99190610439565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610258576040517fa47e364600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe2e82f7331b2182b7fda48768de4f8fd938e0e5a8ee5f14279257343c8e1bc8e3383604051610306929190610454565b60405180910390a15050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b6000813590506103c281610531565b92915050565b6000602082840312156103da57600080fd5b60006103e8848285016103b3565b91505092915050565b6103fa816104bb565b82525050565b600061040b8261049f565b61041581856104aa565b93506104258185602086016104ed565b61042e81610520565b840191505092915050565b600060208201905061044e60008301846103f1565b92915050565b600060408201905061046960008301856103f1565b61047660208301846103f1565b9392505050565b600060208201905081810360008301526104978184610400565b905092915050565b600081519050919050565b600082825260208201905092915050565b60006104c6826104cd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b8381101561050b5780820151818401526020810190506104f0565b8381111561051a576000848401525b50505050565b6000601f19601f8301169050919050565b61053a816104bb565b811461054557600080fd5b5056fea2646970667358221220f31d03d9ac27af45186015e6d2f05c3c63d6f08fb465f3efa8d1abf4a60bb75d64736f6c63430008040033";

export class BadgeRecoveryOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadgeRecoveryOracle> {
    return super.deploy(overrides || {}) as Promise<BadgeRecoveryOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadgeRecoveryOracle {
    return super.attach(address) as BadgeRecoveryOracle;
  }
  connect(signer: Signer): BadgeRecoveryOracle__factory {
    return super.connect(signer) as BadgeRecoveryOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeRecoveryOracleInterface {
    return new utils.Interface(_abi) as BadgeRecoveryOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeRecoveryOracle {
    return new Contract(address, _abi, signerOrProvider) as BadgeRecoveryOracle;
  }
}
