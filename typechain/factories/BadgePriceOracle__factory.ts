/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BadgePriceOracle,
  BadgePriceOracleInterface,
} from "../BadgePriceOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "badgeRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseBadgePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
    ],
    name: "calculateBadgePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levelMultiplierX100",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setBaseBadgePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052660c6f3b40b6c00060005560fa60015534801561002057600080fd5b5060405161092d38038061092d8339818101604052810190610042919061009e565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610110565b600081519050610098816100f9565b92915050565b6000602082840312156100b057600080fd5b60006100be84828501610089565b91505092915050565b60006100d2826100d9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610102816100c7565b811461010d57600080fd5b50565b61080e8061011f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806354fd4d50146100675780638ba4c611146100855780639b2e5e4f146100a3578063d9f05a4d146100c1578063ea3e7cef146100f1578063f586550b1461010f575b600080fd5b61006f61012b565b60405161007c9190610516565b60405180910390f35b61008d610164565b60405161009a9190610558565b60405180910390f35b6100ab61016a565b6040516100b89190610558565b60405180910390f35b6100db60048036038101906100d69190610458565b610170565b6040516100e89190610558565b60405180910390f35b6100f9610209565b60405161010691906104fb565b60405180910390f35b6101296004803603810190610124919061042f565b61022f565b005b6040518060400160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b60015481565b60005481565b600060018260ff161415610188576000549050610204565b60018260ff1611156101ff57600a6101b060646001856101a8919061061a565b60ff1661034c565b6101ba919061058f565b6101d56001546001856101cd919061061a565b60ff1661034c565b600a6000546101e4919061058f565b6101ee91906105c0565b6101f8919061058f565b9050610204565b600090505b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663726305316040518163ffffffff1660e01b815260040160206040518083038186803b15801561029957600080fd5b505afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610406565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890610538565b60405180910390fd5b816000819055505050565b60008082141561035f57600190506103c1565b6001821415610370578290506103c1565b600061038884600285610383919061058f565b61034c565b9050808161039691906105c0565b905060016002846103a791906106ca565b14156103bc5783816103b991906105c0565b90505b809150505b92915050565b6000815190506103d681610793565b92915050565b6000813590506103eb816107aa565b92915050565b600081359050610400816107c1565b92915050565b60006020828403121561041857600080fd5b6000610426848285016103c7565b91505092915050565b60006020828403121561044157600080fd5b600061044f848285016103dc565b91505092915050565b60006020828403121561046a57600080fd5b6000610478848285016103f1565b91505092915050565b61048a8161064e565b82525050565b600061049b82610573565b6104a5818561057e565b93506104b5818560208601610697565b6104be81610759565b840191505092915050565b60006104d6600d8361057e565b91506104e18261076a565b602082019050919050565b6104f581610680565b82525050565b60006020820190506105106000830184610481565b92915050565b600060208201905081810360008301526105308184610490565b905092915050565b60006020820190508181036000830152610551816104c9565b9050919050565b600060208201905061056d60008301846104ec565b92915050565b600081519050919050565b600082825260208201905092915050565b600061059a82610680565b91506105a583610680565b9250826105b5576105b461072a565b5b828204905092915050565b60006105cb82610680565b91506105d683610680565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561060f5761060e6106fb565b5b828202905092915050565b60006106258261068a565b91506106308361068a565b925082821015610643576106426106fb565b5b828203905092915050565b600061065982610660565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156106b557808201518184015260208101905061069a565b838111156106c4576000848401525b50505050565b60006106d582610680565b91506106e083610680565b9250826106f0576106ef61072a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4465706c6f796572206f6e6c7900000000000000000000000000000000000000600082015250565b61079c8161064e565b81146107a757600080fd5b50565b6107b381610680565b81146107be57600080fd5b50565b6107ca8161068a565b81146107d557600080fd5b5056fea2646970667358221220f1a66e3bb123acbbe3ef85e3c28281ed2c1ca3a95759ff07586908b0e02d812f64736f6c63430008040033";

export class BadgePriceOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _badgeRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadgePriceOracle> {
    return super.deploy(
      _badgeRegistry,
      overrides || {}
    ) as Promise<BadgePriceOracle>;
  }
  getDeployTransaction(
    _badgeRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_badgeRegistry, overrides || {});
  }
  attach(address: string): BadgePriceOracle {
    return super.attach(address) as BadgePriceOracle;
  }
  connect(signer: Signer): BadgePriceOracle__factory {
    return super.connect(signer) as BadgePriceOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgePriceOracleInterface {
    return new utils.Interface(_abi) as BadgePriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgePriceOracle {
    return new Contract(address, _abi, signerOrProvider) as BadgePriceOracle;
  }
}
