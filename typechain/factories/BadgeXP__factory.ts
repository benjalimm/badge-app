/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadgeXP, BadgeXPInterface } from "../BadgeXP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recoveryOracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Failure",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "badgeRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "level",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "xp",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "recoveryOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_xpOracle",
        type: "address",
      },
    ],
    name: "setXPOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalXP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xpOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200187738038062001877833981810160405281019062000037919062000118565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001a7565b60008151905062000112816200018d565b92915050565b600080604083850312156200012c57600080fd5b60006200013c8582860162000101565b92505060206200014f8582860162000101565b9150509250929050565b600062000166826200016d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001988162000159565b8114620001a457600080fd5b50565b6116c080620001b76000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063aa93bfa8116100ad578063dd62ed3e11610071578063dd62ed3e14610320578063e3d670d714610350578063ea3e7cef14610380578063ef265d6d1461039e578063ef72c8cd146103ba57610121565b8063aa93bfa81461027a578063cdd8ee7f14610298578063d5f39488146102b6578063da39b3e7146102d4578063dac948651461030457610121565b806323b872dd116100f457806323b872dd146101ae578063313ce567146101de57806370a08231146101fc57806395d89b411461022c578063a9059cbb1461024a57610121565b806306fdde0314610126578063095ea7b3146101445780630cd865ec1461017457806318160ddd14610190575b600080fd5b61012e6103d8565b60405161013b91906112b0565b60405180910390f35b61015e60048036038101906101599190611031565b610415565b60405161016b9190611295565b60405180910390f35b61018e60048036038101906101899190610f7d565b61041d565b005b610198610717565b6040516101a59190611372565b60405180910390f35b6101c860048036038101906101c39190610fe2565b610721565b6040516101d59190611295565b60405180910390f35b6101e661072a565b6040516101f3919061138d565b60405180910390f35b61021660048036038101906102119190610f7d565b610733565b6040516102239190611372565b60405180910390f35b61023461077c565b60405161024191906112b0565b60405180910390f35b610264600480360381019061025f9190611031565b6107b9565b6040516102719190611295565b60405180910390f35b6102826107c1565b60405161028f9190611372565b60405180910390f35b6102a06107c7565b6040516102ad919061127a565b60405180910390f35b6102be6107ed565b6040516102cb919061127a565b60405180910390f35b6102ee60048036038101906102e991906110bf565b610811565b6040516102fb9190611372565b60405180910390f35b61031e60048036038101906103199190610f7d565b610b4f565b005b61033a60048036038101906103359190610fa6565b610c21565b6040516103479190611372565b60405180910390f35b61036a60048036038101906103659190610f7d565b610c29565b6040516103779190611372565b60405180910390f35b610388610c41565b604051610395919061127a565b60405180910390f35b6103b860048036038101906103b391906110bf565b610c67565b005b6103c2610ef5565b6040516103cf919061127a565b60405180910390f35b60606040518060400160405280600f81526020017f426164676520585020706f696e74730000000000000000000000000000000000815250905090565b600092915050565b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663511865e960e01b84604051602401610472919061127a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104dc9190611263565b6000604051808303816000865af19150503d8060008114610519576040519150601f19603f3d011682016040523d82523d6000602084013e61051e565b606091505b509150915081610563576040517ffd5de27600000000000000000000000000000000000000000000000000000000815260040161055a906112d2565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1661058382610f1b565b73ffffffffffffffffffffffffffffffffffffffff1614156106d7576000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106c99190611372565b60405180910390a350610712565b6040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610709906112f2565b60405180910390fd5b505050565b6000600154905090565b60009392505050565b60006002905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040518060400160405280600381526020017f4258500000000000000000000000000000000000000000000000000000000000815250905090565b600092915050565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7856462826040518263ffffffff1660e01b815260040161086f919061127a565b60206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf919061106d565b6108fe576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016108f590611352565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b8152600401610937919061127a565b60206040518083038186803b15801561094f57600080fd5b505afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610987919061106d565b6109c6576040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016109bd90611332565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f85d6f9866040518263ffffffff1660e01b8152600401610a219190611372565b60206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190611096565b915081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ac291906113da565b925050819055508160016000828254610adb91906113da565b925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b3f9190611372565b60405180910390a3509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bdd576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610bd490611312565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600092915050565b60026020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a7856462826040518263ffffffff1660e01b8152600401610cc3919061127a565b60206040518083038186803b158015610cdb57600080fd5b505afa158015610cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d13919061106d565b610d52576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610d4990611352565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b8152600401610d8b919061127a565b60206040518083038186803b158015610da357600080fd5b505afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb919061106d565b610e1a576040517f973d02cb000000000000000000000000000000000000000000000000000000008152600401610e1190611332565b60405180910390fd5b83600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e699190611430565b925050819055508360016000828254610e829190611430565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051610ee79190611372565b60405180910390a350505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060208201519050919050565b600081359050610f3881611645565b92915050565b600081519050610f4d8161165c565b92915050565b600081359050610f6281611673565b92915050565b600081519050610f7781611673565b92915050565b600060208284031215610f8f57600080fd5b6000610f9d84828501610f29565b91505092915050565b60008060408385031215610fb957600080fd5b6000610fc785828601610f29565b9250506020610fd885828601610f29565b9150509250929050565b600080600060608486031215610ff757600080fd5b600061100586828701610f29565b935050602061101686828701610f29565b925050604061102786828701610f53565b9150509250925092565b6000806040838503121561104457600080fd5b600061105285828601610f29565b925050602061106385828601610f53565b9150509250929050565b60006020828403121561107f57600080fd5b600061108d84828501610f3e565b91505092915050565b6000602082840312156110a857600080fd5b60006110b684828501610f68565b91505092915050565b6000806000606084860312156110d457600080fd5b60006110e286828701610f53565b93505060206110f386828701610f29565b925050604061110486828701610f29565b9150509250925092565b61111781611464565b82525050565b61112681611476565b82525050565b6000611137826113a8565b61114181856113be565b93506111518185602086016114b9565b80840191505092915050565b6000611168826113b3565b61117281856113c9565b93506111828185602086016114b9565b61118b8161151b565b840191505092915050565b60006111a3601e836113c9565b91506111ae8261152c565b602082019050919050565b60006111c6602a836113c9565b91506111d182611555565b604082019050919050565b60006111e96015836113c9565b91506111f4826115a4565b602082019050919050565b600061120c6024836113c9565b9150611217826115cd565b604082019050919050565b600061122f6019836113c9565b915061123a8261161c565b602082019050919050565b61124e816114a2565b82525050565b61125d816114ac565b82525050565b600061126f828461112c565b915081905092915050565b600060208201905061128f600083018461110e565b92915050565b60006020820190506112aa600083018461111d565b92915050565b600060208201905081810360008301526112ca818461115d565b905092915050565b600060208201905081810360008301526112eb81611196565b9050919050565b6000602082019050818103600083015261130b816111b9565b9050919050565b6000602082019050818103600083015261132b816111dc565b9050919050565b6000602082019050818103600083015261134b816111ff565b9050919050565b6000602082019050818103600083015261136b81611222565b9050919050565b60006020820190506113876000830184611245565b92915050565b60006020820190506113a26000830184611254565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006113e5826114a2565b91506113f0836114a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611425576114246114ec565b5b828201905092915050565b600061143b826114a2565b9150611446836114a2565b925082821015611459576114586114ec565b5b828203905092915050565b600061146f82611482565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156114d75780820151818401526020810190506114bc565b838111156114e6576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f43616c6c20746f207265636f76657279206f7261636c65206661696c65640000600082015250565b7f4f6e6c79207265636f7665727920616464726573732063616e207265636f766560008201527f7220426164676520585000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206465706c6f7965722063616e207365740000000000000000000000600082015250565b7f456e74697479206973206e6f74207265676973746572656420746f207265676960008201527f7374727900000000000000000000000000000000000000000000000000000000602082015250565b7f5265676973747279206973206e6f742063657274696669656400000000000000600082015250565b61164e81611464565b811461165957600080fd5b50565b61166581611476565b811461167057600080fd5b50565b61167c816114a2565b811461168757600080fd5b5056fea26469706673582212202eb81c8e1869db5c0c81a327efc0dba9399bdbba11194c9ea834ae5d4391746564736f6c63430008040033";

export class BadgeXP__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _badgeRegistry: string,
    _recoveryOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadgeXP> {
    return super.deploy(
      _badgeRegistry,
      _recoveryOracle,
      overrides || {}
    ) as Promise<BadgeXP>;
  }
  getDeployTransaction(
    _badgeRegistry: string,
    _recoveryOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _badgeRegistry,
      _recoveryOracle,
      overrides || {}
    );
  }
  attach(address: string): BadgeXP {
    return super.attach(address) as BadgeXP;
  }
  connect(signer: Signer): BadgeXP__factory {
    return super.connect(signer) as BadgeXP__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeXPInterface {
    return new utils.Interface(_abi) as BadgeXPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeXP {
    return new Contract(address, _abi, signerOrProvider) as BadgeXP;
  }
}
