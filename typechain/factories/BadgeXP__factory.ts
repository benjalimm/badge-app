/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadgeXP, BadgeXPInterface } from "../BadgeXP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "badgeRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseXP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "level",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalXP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526103e86003553480156200001757600080fd5b506040516200132d3803806200132d83398181016040528101906200003d91906200009c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000116565b6000815190506200009681620000fc565b92915050565b600060208284031215620000af57600080fd5b6000620000bf8482850162000085565b91505092915050565b6000620000d582620000dc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010781620000c8565b81146200011357600080fd5b50565b61120780620001266000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806394bf804d11610097578063dd62ed3e11610066578063dd62ed3e146102b1578063e3d670d7146102e1578063ea3e7cef14610311578063fcd3533c1461032f57610100565b806394bf804d1461022957806395d89b4114610245578063a9059cbb14610263578063aa93bfa81461029357610100565b806323b872dd116100d357806323b872dd1461018d578063313ce567146101bd57806368130fd1146101db57806370a08231146101f957610100565b806306fdde0314610105578063095ea7b3146101235780630cd865ec1461015357806318160ddd1461016f575b600080fd5b61010d61034b565b60405161011a9190610e2a565b60405180910390f35b61013d60048036038101906101389190610c98565b610388565b60405161014a9190610e0f565b60405180910390f35b61016d60048036038101906101689190610bbb565b610390565b005b610177610667565b6040516101849190610e8c565b60405180910390f35b6101a760048036038101906101a29190610c49565b610670565b6040516101b49190610e0f565b60405180910390f35b6101c5610679565b6040516101d29190610ea7565b60405180910390f35b6101e3610682565b6040516101f09190610e8c565b60405180910390f35b610213600480360381019061020e9190610bbb565b610688565b6040516102209190610e8c565b60405180910390f35b610243600480360381019061023e9190610cfd565b6106d1565b005b61024d6108a0565b60405161025a9190610e2a565b60405180910390f35b61027d60048036038101906102789190610c98565b6108dd565b60405161028a9190610e0f565b60405180910390f35b61029b6108e5565b6040516102a89190610e8c565b60405180910390f35b6102cb60048036038101906102c69190610c0d565b6108eb565b6040516102d89190610e8c565b60405180910390f35b6102fb60048036038101906102f69190610bbb565b6108f3565b6040516103089190610e8c565b60405180910390f35b61031961090b565b6040516103269190610df4565b60405180910390f35b61034960048036038101906103449190610cfd565b610931565b005b60606040518060400160405280600f81526020017f426164676520585020706f696e74730000000000000000000000000000000000815250905090565b600092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4bf50756040518163ffffffff1660e01b815260040160206040518083038186803b1580156103fa57600080fd5b505afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190610be4565b73ffffffffffffffffffffffffffffffffffffffff1663511865e9836040518263ffffffff1660e01b815260040161046a9190610df4565b60206040518083038186803b15801561048257600080fd5b505afa158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba9190610be4565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610628576000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161061a9190610e8c565b60405180910390a350610663565b6040517f973d02cb00000000000000000000000000000000000000000000000000000000815260040161065a90610e6c565b60405180910390fd5b5050565b60008054905090565b60009392505050565b60006002905090565b60035481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b815260040161072c9190610df4565b60206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610cd4565b6107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290610e4c565b60405180910390fd5b60006107c683610af3565b905080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108179190610ede565b925050819055508060008082825461082f9190610ede565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108939190610e8c565b60405180910390a3505050565b60606040518060400160405280600381526020017f4258500000000000000000000000000000000000000000000000000000000000815250905090565b600092915050565b60005481565b600092915050565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b815260040161098c9190610df4565b60206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190610cd4565b610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290610e4c565b60405180910390fd5b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a6a9190610fbf565b9250508190555081600080828254610a829190610fbf565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ae79190610e8c565b60405180910390a35050565b600080821115610b5d576000808390505b6000811115610b53576064826019610b1c9190610f65565b610b269190610f34565b600354610b339190610ede565b82610b3e9190610ede565b91508080610b4b9061107b565b915050610b04565b5080915050610b62565b600090505b919050565b600081359050610b768161118c565b92915050565b600081519050610b8b8161118c565b92915050565b600081519050610ba0816111a3565b92915050565b600081359050610bb5816111ba565b92915050565b600060208284031215610bcd57600080fd5b6000610bdb84828501610b67565b91505092915050565b600060208284031215610bf657600080fd5b6000610c0484828501610b7c565b91505092915050565b60008060408385031215610c2057600080fd5b6000610c2e85828601610b67565b9250506020610c3f85828601610b67565b9150509250929050565b600080600060608486031215610c5e57600080fd5b6000610c6c86828701610b67565b9350506020610c7d86828701610b67565b9250506040610c8e86828701610ba6565b9150509250925092565b60008060408385031215610cab57600080fd5b6000610cb985828601610b67565b9250506020610cca85828601610ba6565b9150509250929050565b600060208284031215610ce657600080fd5b6000610cf484828501610b91565b91505092915050565b60008060408385031215610d1057600080fd5b6000610d1e85828601610ba6565b9250506020610d2f85828601610b67565b9150509250929050565b610d4281610ff3565b82525050565b610d5181611005565b82525050565b6000610d6282610ec2565b610d6c8185610ecd565b9350610d7c818560208601611048565b610d8581611103565b840191505092915050565b6000610d9d601883610ecd565b9150610da882611114565b602082019050919050565b6000610dc0602a83610ecd565b9150610dcb8261113d565b604082019050919050565b610ddf81611031565b82525050565b610dee8161103b565b82525050565b6000602082019050610e096000830184610d39565b92915050565b6000602082019050610e246000830184610d48565b92915050565b60006020820190508181036000830152610e448184610d57565b905092915050565b60006020820190508181036000830152610e6581610d90565b9050919050565b60006020820190508181036000830152610e8581610db3565b9050919050565b6000602082019050610ea16000830184610dd6565b92915050565b6000602082019050610ebc6000830184610de5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610ee982611031565b9150610ef483611031565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f2957610f286110a5565b5b828201905092915050565b6000610f3f82611031565b9150610f4a83611031565b925082610f5a57610f596110d4565b5b828204905092915050565b6000610f7082611031565b9150610f7b83611031565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb457610fb36110a5565b5b828202905092915050565b6000610fca82611031565b9150610fd583611031565b925082821015610fe857610fe76110a5565b5b828203905092915050565b6000610ffe82611011565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561106657808201518184015260208101905061104b565b83811115611075576000848401525b50505050565b600061108682611031565b9150600082141561109a576110996110a5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f5265676973746572656420656e746974696573206f6e6c790000000000000000600082015250565b7f4f6e6c79207265636f7665727920616464726573732063616e207265636f766560008201527f7220426164676520585000000000000000000000000000000000000000000000602082015250565b61119581610ff3565b81146111a057600080fd5b50565b6111ac81611005565b81146111b757600080fd5b50565b6111c381611031565b81146111ce57600080fd5b5056fea26469706673582212202e7a973bbeeef2653180069c75b36930bd70a2ab8fe086d2a35aa7ef25c15e0b64736f6c63430008040033";

export class BadgeXP__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _badgeRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadgeXP> {
    return super.deploy(_badgeRegistry, overrides || {}) as Promise<BadgeXP>;
  }
  getDeployTransaction(
    _badgeRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_badgeRegistry, overrides || {});
  }
  attach(address: string): BadgeXP {
    return super.attach(address) as BadgeXP;
  }
  connect(signer: Signer): BadgeXP__factory {
    return super.connect(signer) as BadgeXP__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeXPInterface {
    return new utils.Interface(_abi) as BadgeXPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeXP {
    return new Contract(address, _abi, signerOrProvider) as BadgeXP;
  }
}
