/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadgeXP, BadgeXPInterface } from "../BadgeXP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_badgeRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recoveryOracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Failure",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "badgeRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseXP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "level",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "recoveryOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalXP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526103e86004553480156200001757600080fd5b50604051620014903803806200149083398181016040528101906200003d9190620000de565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200016d565b600081519050620000d88162000153565b92915050565b60008060408385031215620000f257600080fd5b60006200010285828601620000c7565b92505060206200011585828601620000c7565b9150509250929050565b60006200012c8262000133565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200015e816200011f565b81146200016a57600080fd5b50565b611313806200017d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806394bf804d116100a2578063cdd8ee7f11610071578063cdd8ee7f146102bc578063dd62ed3e146102da578063e3d670d71461030a578063ea3e7cef1461033a578063fcd3533c146103585761010b565b806394bf804d1461023457806395d89b4114610250578063a9059cbb1461026e578063aa93bfa81461029e5761010b565b806323b872dd116100de57806323b872dd14610198578063313ce567146101c857806368130fd1146101e657806370a08231146102045761010b565b806306fdde0314610110578063095ea7b31461012e5780630cd865ec1461015e57806318160ddd1461017a575b600080fd5b610118610374565b6040516101259190610ed7565b60405180910390f35b61014860048036038101906101439190610cda565b6103b1565b6040516101559190610ebc565b60405180910390f35b61017860048036038101906101739190610c26565b6103b9565b005b6101826106b3565b60405161018f9190610f59565b60405180910390f35b6101b260048036038101906101ad9190610c8b565b6106bc565b6040516101bf9190610ebc565b60405180910390f35b6101d06106c5565b6040516101dd9190610f74565b60405180910390f35b6101ee6106ce565b6040516101fb9190610f59565b60405180910390f35b61021e60048036038101906102199190610c26565b6106d4565b60405161022b9190610f59565b60405180910390f35b61024e60048036038101906102499190610d3f565b61071d565b005b6102586108ec565b6040516102659190610ed7565b60405180910390f35b61028860048036038101906102839190610cda565b610929565b6040516102959190610ebc565b60405180910390f35b6102a6610931565b6040516102b39190610f59565b60405180910390f35b6102c4610937565b6040516102d19190610ea1565b60405180910390f35b6102f460048036038101906102ef9190610c4f565b61095d565b6040516103019190610f59565b60405180910390f35b610324600480360381019061031f9190610c26565b610965565b6040516103319190610f59565b60405180910390f35b61034261097d565b60405161034f9190610ea1565b60405180910390f35b610372600480360381019061036d9190610d3f565b6109a3565b005b60606040518060400160405280600f81526020017f426164676520585020706f696e74730000000000000000000000000000000000815250905090565b600092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663511865e960e01b8460405160240161040e9190610ea1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104789190610e8a565b6000604051808303816000865af19150503d80600081146104b5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ba565b606091505b5091509150816104ff576040517ffd5de2760000000000000000000000000000000000000000000000000000000081526004016104f690610ef9565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1661051f82610b65565b73ffffffffffffffffffffffffffffffffffffffff161415610673576000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106659190610f59565b60405180910390a3506106ae565b6040517f973d02cb0000000000000000000000000000000000000000000000000000000081526004016106a590610f39565b60405180910390fd5b505050565b60008054905090565b60009392505050565b60006002905090565b60045481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b81526004016107789190610ea1565b60206040518083038186803b15801561079057600080fd5b505afa1580156107a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190610d16565b610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe90610f19565b60405180910390fd5b600061081283610b73565b905080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108639190610fc1565b925050819055508060008082825461087b9190610fc1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108df9190610f59565b60405180910390a3505050565b60606040518060400160405280600381526020017f4258500000000000000000000000000000000000000000000000000000000000815250905090565b600092915050565b60005481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600092915050565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3c5a547336040518263ffffffff1660e01b81526004016109fe9190610ea1565b60206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190610d16565b610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490610f19565b60405180910390fd5b81600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610adc91906110a2565b9250508190555081600080828254610af491906110a2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b599190610f59565b60405180910390a35050565b600060208201519050919050565b600080821115610bdd576000808390505b6000811115610bd3576064826019610b9c9190611048565b610ba69190611017565b600454610bb39190610fc1565b82610bbe9190610fc1565b91508080610bcb9061115e565b915050610b84565b5080915050610be2565b600090505b919050565b600081359050610bf681611298565b92915050565b600081519050610c0b816112af565b92915050565b600081359050610c20816112c6565b92915050565b600060208284031215610c3857600080fd5b6000610c4684828501610be7565b91505092915050565b60008060408385031215610c6257600080fd5b6000610c7085828601610be7565b9250506020610c8185828601610be7565b9150509250929050565b600080600060608486031215610ca057600080fd5b6000610cae86828701610be7565b9350506020610cbf86828701610be7565b9250506040610cd086828701610c11565b9150509250925092565b60008060408385031215610ced57600080fd5b6000610cfb85828601610be7565b9250506020610d0c85828601610c11565b9150509250929050565b600060208284031215610d2857600080fd5b6000610d3684828501610bfc565b91505092915050565b60008060408385031215610d5257600080fd5b6000610d6085828601610c11565b9250506020610d7185828601610be7565b9150509250929050565b610d84816110d6565b82525050565b610d93816110e8565b82525050565b6000610da482610f8f565b610dae8185610fa5565b9350610dbe81856020860161112b565b80840191505092915050565b6000610dd582610f9a565b610ddf8185610fb0565b9350610def81856020860161112b565b610df8816111e6565b840191505092915050565b6000610e10601e83610fb0565b9150610e1b826111f7565b602082019050919050565b6000610e33601883610fb0565b9150610e3e82611220565b602082019050919050565b6000610e56602a83610fb0565b9150610e6182611249565b604082019050919050565b610e7581611114565b82525050565b610e848161111e565b82525050565b6000610e968284610d99565b915081905092915050565b6000602082019050610eb66000830184610d7b565b92915050565b6000602082019050610ed16000830184610d8a565b92915050565b60006020820190508181036000830152610ef18184610dca565b905092915050565b60006020820190508181036000830152610f1281610e03565b9050919050565b60006020820190508181036000830152610f3281610e26565b9050919050565b60006020820190508181036000830152610f5281610e49565b9050919050565b6000602082019050610f6e6000830184610e6c565b92915050565b6000602082019050610f896000830184610e7b565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610fcc82611114565b9150610fd783611114565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561100c5761100b611188565b5b828201905092915050565b600061102282611114565b915061102d83611114565b92508261103d5761103c6111b7565b5b828204905092915050565b600061105382611114565b915061105e83611114565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561109757611096611188565b5b828202905092915050565b60006110ad82611114565b91506110b883611114565b9250828210156110cb576110ca611188565b5b828203905092915050565b60006110e1826110f4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561114957808201518184015260208101905061112e565b83811115611158576000848401525b50505050565b600061116982611114565b9150600082141561117d5761117c611188565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f43616c6c20746f207265636f76657279206f7261636c65206661696c65640000600082015250565b7f5265676973746572656420656e746974696573206f6e6c790000000000000000600082015250565b7f4f6e6c79207265636f7665727920616464726573732063616e207265636f766560008201527f7220426164676520585000000000000000000000000000000000000000000000602082015250565b6112a1816110d6565b81146112ac57600080fd5b50565b6112b8816110e8565b81146112c357600080fd5b50565b6112cf81611114565b81146112da57600080fd5b5056fea264697066735822122039a113d879e2060983ae34e8e175ca839d5b3a9f3d87714c636fefbbed48508e64736f6c63430008040033";

export class BadgeXP__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _badgeRegistry: string,
    _recoveryOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadgeXP> {
    return super.deploy(
      _badgeRegistry,
      _recoveryOracle,
      overrides || {}
    ) as Promise<BadgeXP>;
  }
  getDeployTransaction(
    _badgeRegistry: string,
    _recoveryOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _badgeRegistry,
      _recoveryOracle,
      overrides || {}
    );
  }
  attach(address: string): BadgeXP {
    return super.attach(address) as BadgeXP;
  }
  connect(signer: Signer): BadgeXP__factory {
    return super.connect(signer) as BadgeXP__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadgeXPInterface {
    return new utils.Interface(_abi) as BadgeXPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadgeXP {
    return new Contract(address, _abi, signerOrProvider) as BadgeXP;
  }
}
